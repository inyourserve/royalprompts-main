from beanie import Document, Indexed
from pydantic import Field
from typing import Optional, List
from datetime import datetime
from enum import Enum


class DeviceType(str, Enum):
    ANDROID = "android"
    IOS = "ios"
    WEB = "web"


class UserType(str, Enum):
    ANONYMOUS = "anonymous"


class DeviceUser(Document):
    """Anonymous device-based user tracking"""
    
    # Device identification
    device_id: str = Indexed(unique=True)  # UUID generated by app
    device_type: DeviceType
    device_model: Optional[str] = None
    os_version: Optional[str] = None
    app_version: Optional[str] = None
    
    # User classification
    user_type: UserType = UserType.ANONYMOUS
    is_active: bool = True
    is_blocked: bool = False
    
    # Usage tracking
    first_seen: datetime = Field(default_factory=datetime.utcnow)
    last_seen: datetime = Field(default_factory=datetime.utcnow)
    total_requests: int = 0
    daily_requests: int = 0
    last_request_date: Optional[datetime] = None
    
    # Location and metadata
    country: Optional[str] = None
    ip_address: Optional[str] = None
    user_agent: Optional[str] = None
    
    # Note: Favorites are handled by separate 'favorites' collection
    # Note: Unlocked prompts are handled by separate 'unlocked_prompts' collection (if needed)
    
    class Settings:
        name = "device_users"
        indexes = [
            "device_id",
            "user_type",
            "is_active",
            "last_seen",
            "country"
        ]
    
    def update_activity(self) -> None:
        """Update user activity"""
        now = datetime.utcnow()
        self.last_seen = now
        self.total_requests += 1
        
        # Reset daily counter if new day
        if not self.last_request_date or self.last_request_date.date() != now.date():
            self.daily_requests = 1
        else:
            self.daily_requests += 1
        
        self.last_request_date = now
        
    
    def has_unlocked_prompt(self, prompt_id: str) -> bool:
        """Check if user has unlocked a specific prompt"""
        # For now, all prompts are unlocked (no premium features)
        # In the future, this could check a separate 'unlocked_prompts' collection
        return True
    
    def unlock_prompt(self, prompt_id: str) -> None:
        """Unlock a prompt for this device"""
        # For now, all prompts are unlocked (no premium features)
        # In the future, this could add to a separate 'unlocked_prompts' collection
        pass
