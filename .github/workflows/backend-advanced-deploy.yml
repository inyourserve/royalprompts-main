name: üöÄ Advanced Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-advanced-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  # Code Quality Checks
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: üì¶ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}

    - name: üîß Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 pytest pytest-asyncio httpx

    - name: üé® Code formatting check
      working-directory: ./backend
      run: |
        black --check app/
        echo "‚úÖ Code formatting is correct"

    - name: üîç Lint check
      working-directory: ./backend
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "‚úÖ Linting passed"

    - name: üß™ Run tests
      working-directory: ./backend
      run: |
        # Basic import and syntax tests
        python -m py_compile app/main.py
        python -c "import app.main; print('‚úÖ Backend imports successfully')"
        
        # Test API endpoints structure
        python -c "
        from app.main import app
        from fastapi.testclient import TestClient
        client = TestClient(app)
        response = client.get('/health')
        print(f'Health check status: {response.status_code}')
        "
      env:
        MONGODB_URL: mongodb://localhost:27017/test
        SECRET_KEY: test-secret-key

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: üîí Install security tools
      run: |
        pip install bandit safety

    - name: üõ°Ô∏è Security scan
      working-directory: ./backend
      run: |
        # Bandit security scan
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -ll
        
        # Safety check for known vulnerabilities
        safety check --json --output safety-report.json || true
        safety check

  # Build and Push
  build-and-push:
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üèóÔ∏è Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üè∑Ô∏è Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: üèóÔ∏è Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üöÄ Deploy to Staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          cd /root/royalprompts-staging
          git pull origin develop
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker-compose -f docker-compose.staging.yml up -d backend
          sleep 30
          curl -f http://localhost:8000/health || exit 1

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üöÄ Deploy to Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: ${{ secrets.DROPLET_PORT || 22 }}
        script: |
          # Set variables
          PROJECT_DIR="/root/royalprompts-main"
          BACKUP_DIR="/root/backups/$(date +%Y%m%d_%H%M%S)"
          
          # Navigate to project directory
          cd $PROJECT_DIR
          
          # Create backup of current deployment
          echo "üì¶ Creating backup..."
          mkdir -p $BACKUP_DIR
          docker-compose -f docker-compose.production.yml ps > $BACKUP_DIR/containers_before.txt
          docker images | grep backend > $BACKUP_DIR/images_before.txt
          
          # Pull latest changes
          echo "üì• Pulling latest changes..."
          git pull origin main
          
          # Login to GitHub Container Registry
          echo "üîê Logging in to container registry..."
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest backend image
          echo "üì• Pulling latest backend image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Health check before deployment
          echo "üè• Checking current backend health..."
          if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "‚úÖ Current backend is healthy"
          else
            echo "‚ö†Ô∏è Current backend is not responding"
          fi
          
          # Deploy new version
          echo "üöÄ Deploying new backend version..."
          docker-compose -f docker-compose.production.yml up -d backend
          
          # Wait for deployment to be healthy
          echo "‚è≥ Waiting for new backend to be healthy..."
          for i in {1..60}; do
            if curl -f http://localhost:8000/health > /dev/null 2>&1; then
              echo "‚úÖ New backend is healthy!"
              break
            fi
            echo "Attempt $i: Backend not ready yet..."
            sleep 10
          done
          
          # Final health check
          if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "üéâ Deployment successful!"
            
            # Clean up old images
            echo "üßπ Cleaning up old images..."
            docker image prune -f
            
            # Save deployment info
            echo "üìù Saving deployment info..."
            echo "Deployed at: $(date)" > $BACKUP_DIR/deployment_info.txt
            echo "Commit: ${{ github.sha }}" >> $BACKUP_DIR/deployment_info.txt
            echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $BACKUP_DIR/deployment_info.txt
            
          else
            echo "‚ùå Deployment failed! Backend is not responding."
            echo "üîÑ Attempting rollback..."
            
            # Rollback to previous version
            docker-compose -f docker-compose.production.yml restart backend
            sleep 30
            
            if curl -f http://localhost:8000/health > /dev/null 2>&1; then
              echo "‚úÖ Rollback successful!"
            else
              echo "‚ùå Rollback failed! Manual intervention required."
            fi
            
            exit 1
          fi

    - name: üîç Verify deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: ${{ secrets.DROPLET_PORT || 22 }}
        script: |
          # Comprehensive health checks
          echo "üîç Running comprehensive health checks..."
          
          # Basic health check
          curl -f http://localhost:8000/health || exit 1
          
          # API endpoints check
          curl -f http://localhost:8000/api/health || exit 1
          
          # Check container status
          docker-compose -f docker-compose.production.yml ps
          
          # Check logs for errors
          echo "üìã Recent backend logs:"
          docker-compose -f docker-compose.production.yml logs --tail=20 backend
          
          echo "‚úÖ All health checks passed!"

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: üì¢ Deployment Status Notification
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "üéâ Production deployment successful!"
          echo "üîó API: http://${{ secrets.DROPLET_HOST }}/api"
          echo "üè• Health: http://${{ secrets.DROPLET_HOST }}/api/health"
          echo "üìä Commit: ${{ github.sha }}"
        elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "üéâ Staging deployment successful!"
          echo "üîó API: http://${{ secrets.STAGING_HOST }}/api"
        else
          echo "‚ùå Deployment failed!"
          echo "üìä Commit: ${{ github.sha }}"
        fi
